/*
 * Copyright 2022-2024, Zhichun Wu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.jdbcx.driver;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

interface ExecuteCallback {
    boolean execute(String query) throws SQLException;

    int executeUpdate(String query) throws SQLException;

    ResultSet getResultSet() throws SQLException;

    int getUpdateCount() throws SQLException;

    ResultSet getGeneratedKeys() throws SQLException;
}

class BaseExecuteCallback implements ExecuteCallback {
    private final boolean reuse;
    private final WrappedStatement stmt;

    private Statement current;

    BaseExecuteCallback(WrappedStatement stmt) {
        this.reuse = stmt.conn.getDialect().supportMultipleResultSetsPerStatement();
        this.stmt = stmt;
    }

    protected final Statement getOrCreateStatement(boolean preferToReuse) throws SQLException {
        current = reuse || preferToReuse ? stmt.getImplementation() : stmt.newOrphanStatement();
        return current;
    }

    @Override
    public final ResultSet getResultSet() throws SQLException {
        return current.getResultSet();
    }

    @Override
    public final int getUpdateCount() throws SQLException {
        return current.getUpdateCount();
    }

    @Override
    public final ResultSet getGeneratedKeys() throws SQLException {
        return current.getGeneratedKeys();
    }

    @Override
    public boolean execute(String query) throws SQLException {
        return getOrCreateStatement(false).execute(query);
    }

    @Override
    public int executeUpdate(String query) throws SQLException {
        return stmt.getImplementation().executeUpdate(query);
    }
}

final class ExecuteWithFlag extends BaseExecuteCallback {
    private final int autoGeneratedKeys;

    ExecuteWithFlag(WrappedStatement stmt, int autoGeneratedKeys) {
        super(stmt);
        this.autoGeneratedKeys = autoGeneratedKeys;
    }

    @Override
    public boolean execute(String query) throws SQLException {
        return getOrCreateStatement(false).execute(query, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String query) throws SQLException {
        return getOrCreateStatement(Statement.RETURN_GENERATED_KEYS != autoGeneratedKeys).executeUpdate(query,
                autoGeneratedKeys);
    }
}

final class ExecuteWithIndex extends BaseExecuteCallback {
    private final int[] columnIndexes;

    ExecuteWithIndex(WrappedStatement stmt, int[] columnIndexes) {
        super(stmt);
        this.columnIndexes = columnIndexes;
    }

    @Override
    public boolean execute(String query) throws SQLException {
        return getOrCreateStatement(false).execute(query, columnIndexes);
    }

    @Override
    public int executeUpdate(String query) throws SQLException {
        return getOrCreateStatement(columnIndexes == null || columnIndexes.length == 0).executeUpdate(query,
                columnIndexes);
    }
}

final class ExecuteWithNames extends BaseExecuteCallback {
    private final String[] columnNames;

    ExecuteWithNames(WrappedStatement stmt, String[] columnNames) {
        super(stmt);
        this.columnNames = columnNames;
    }

    @Override
    public boolean execute(String query) throws SQLException {
        return getOrCreateStatement(false).execute(query, columnNames);
    }

    @Override
    public int executeUpdate(String query) throws SQLException {
        return getOrCreateStatement(columnNames == null || columnNames.length == 0).executeUpdate(query, columnNames);
    }
}